<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ADC_Channel_2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ADC_Channel_2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Sat Jan 28 10:27:44 2023
<BR><P>
<H3>Maximum Stack Usage =         96 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Serial_begin &rArr; USART_Config &rArr; RCM_GetMasterClockFreq &rArr; __aeabi_uidiv
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">EINTA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">EINTA_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ADC_IRQHandler</a> from apm32f00x_int.o(.text.ADC_IRQHandler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[8]">EINTA_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[9]">EINTB_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[a]">EINTC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[b]">EINTD_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from apm32f00x_int.o(.text.HardFault_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[13]">IIC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from apm32f00x_int.o(.text.NMI_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from apm32f00x_int.o(.text.PendSV_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[7]">RCM_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[c]">SPI_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from apm32f00x_int.o(.text.SVC_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from apm32f00x_int.o(.text.SysTick_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1e]">SystemInit</a> from system_apm32f00x.o(.text.SystemInit) referenced from startup_apm32f0xx.o(.text)
 <LI><a href="#[1c]">TMR1A_CC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1b]">TMR1A_UT_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[e]">TMR1_CC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[d]">TMR1_UT_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[10]">TMR2_CC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[f]">TMR2_UO_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[15]">TMR4_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[12]">USART1_RX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[11]">USART1_TX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1a]">USART2_RX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[19]">USART2_TX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[18]">USART3_RX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[17]">USART3_TX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[6]">WUPT_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_apm32f0xx.o(.text)
 <LI><a href="#[1d]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[20]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[22]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[41]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[42]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[43]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[44]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINTA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINTA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EINTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EINTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TMR1A_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TMR1A_UT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TMR1_UT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR2_UO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USART2_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USART2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>USART3_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>USART3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WUPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_GetMasterClockFreq
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCMeasure
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[46]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>ADCCalibration</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(.text.ADCCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADCCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetOffset
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DisableCompensation
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableCompensation
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearStatusFlag
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadStatusFlag
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadData
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>ADCMeasure</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main.o(.text.ADCMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADCMeasure &rArr; SerialPrint_NumString &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearStatusFlag
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadStatusFlag
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LedOff
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LedOn
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>ADC_ClearStatusFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCMeasure
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[3e]"></a>ADC_Config</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, apm32f00x_adc.o(.text.ADC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>ADC_ConfigStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>ADC_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[2c]"></a>ADC_DisableCompensation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_DisableCompensation))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[27]"></a>ADC_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>ADC_EnableCompensation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_EnableCompensation))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[14]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_ReadData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCMeasure
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[29]"></a>ADC_ReadStatusFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_ReadStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCMeasure
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[3c]"></a>ADC_SetMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>ADC_SetOffset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_SetOffset))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[28]"></a>ADC_StartConversion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>Board_LedInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, board.o(.text.Board_LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Board_LedInit &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>Board_LedOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(.text.Board_LedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCMeasure
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>Board_LedOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(.text.Board_LedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_LedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCMeasure
</UL>

<P><STRONG><a name="[35]"></a>GPIO_ClearBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f00x_gpio.o(.text.GPIO_ClearBit))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LedOn
</UL>

<P><STRONG><a name="[33]"></a>GPIO_Config</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, apm32f00x_gpio.o(.text.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LedInit
</UL>

<P><STRONG><a name="[34]"></a>GPIO_SetBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f00x_gpio.o(.text.GPIO_SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LedOff
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RCM_GetMasterClockFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, apm32f00x_rcm.o(.text.RCM_GetMasterClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCM_GetMasterClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SerialPrint_NumString</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, usart_app.o(.text.SerialPrint_NumString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SerialPrint_NumString &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadStatusFlag
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxData8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCMeasure
</UL>

<P><STRONG><a name="[39]"></a>Serial_begin</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usart_app.o(.text.Serial_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Serial_begin &rArr; USART_Config &rArr; RCM_GetMasterClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SystemInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_apm32f00x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>USART_Config</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, apm32f00x_usart.o(.text.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_Config &rArr; RCM_GetMasterClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_GetMasterClockFreq
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_begin
</UL>

<P><STRONG><a name="[3b]"></a>USART_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f00x_usart.o(.text.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_begin
</UL>

<P><STRONG><a name="[38]"></a>USART_ReadStatusFlag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, apm32f00x_usart.o(.text.USART_ReadStatusFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ReadStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
</UL>

<P><STRONG><a name="[37]"></a>USART_TxData8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_usart.o(.text.USART_TxData8))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
</UL>

<P><STRONG><a name="[1d]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main &rArr; Serial_begin &rArr; USART_Config &rArr; RCM_GetMasterClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetMode
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigStructInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCMeasure
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_begin
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LedOff
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LedInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[47]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[48]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[49]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
