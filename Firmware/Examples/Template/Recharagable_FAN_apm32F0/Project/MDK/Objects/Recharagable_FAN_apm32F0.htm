<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Recharagable_FAN_apm32F0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Recharagable_FAN_apm32F0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Thu Sep  4 11:48:10 2025
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; BtnSpeedUpDown &rArr; Fan_Load &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ADC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[8]">EINTA_IRQHandler</a> from apm32f00x_int.o(.text.EINTA_IRQHandler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[9]">EINTB_IRQHandler</a> from apm32f00x_int.o(.text.EINTB_IRQHandler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[a]">EINTC_IRQHandler</a> from apm32f00x_int.o(.text.EINTC_IRQHandler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[b]">EINTD_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from apm32f00x_int.o(.text.HardFault_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[13]">IIC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from apm32f00x_int.o(.text.NMI_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from apm32f00x_int.o(.text.PendSV_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[7]">RCM_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[c]">SPI_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from apm32f00x_int.o(.text.SVC_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from apm32f00x_int.o(.text.SysTick_Handler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1d]">SystemInit</a> from system_apm32f00x.o(.text.SystemInit) referenced from startup_apm32f0xx.o(.text)
 <LI><a href="#[1c]">TMR1A_CC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1b]">TMR1A_UT_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[e]">TMR1_CC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[d]">TMR1_UT_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[10]">TMR2_CC_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[f]">TMR2_UO_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[15]">TMR4_IRQHandler</a> from apm32f00x_int.o(.text.TMR4_IRQHandler) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[12]">USART1_RX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[11]">USART1_TX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1a]">USART2_RX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[19]">USART2_TX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[18]">USART3_RX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[17]">USART3_TX_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[6]">WUPT_IRQHandler</a> from startup_apm32f0xx.o(.text) referenced from startup_apm32f0xx.o(RESET)
 <LI><a href="#[1e]">__main</a> from __main.o(!!!main) referenced from startup_apm32f0xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[21]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[26]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[90]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[91]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[92]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[93]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[94]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[95]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[96]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[98]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[99]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[a7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[a8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[20]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ad]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[23]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ae]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[27]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BtnSpeedUpDown &rArr; Fan_Load &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[af]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[31]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EINTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TMR1A_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TMR1A_UT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TMR1_UT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR2_UO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USART2_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USART2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>USART3_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>USART3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WUPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_apm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[29]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>ADCCalibration</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, adc.o(.text.ADCCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADCCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetOffset
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DisableCompensation
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableCompensation
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearStatusFlag
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadStatusFlag
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadData
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[b8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>ADC_ClearStatusFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[41]"></a>ADC_Config</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, apm32f00x_adc.o(.text.ADC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[40]"></a>ADC_ConfigStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[39]"></a>ADC_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[3b]"></a>ADC_DisableCompensation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_DisableCompensation))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[36]"></a>ADC_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[34]"></a>ADC_EnableCompensation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_EnableCompensation))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[3c]"></a>ADC_GPIO_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc.o(.text.ADC_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_GPIO_Init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[3a]"></a>ADC_ReadData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[38]"></a>ADC_ReadStatusFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_ReadStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[3f]"></a>ADC_SetMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[33]"></a>ADC_SetOffset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_SetOffset))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>

<P><STRONG><a name="[37]"></a>ADC_StartConversion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_adc.o(.text.ADC_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[3e]"></a>ADC_read</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, adc.o(.text.ADC_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_read &rArr; ADC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearStatusFlag
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadStatusFlag
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadData
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetMode
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigStructInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBATvolt
</UL>

<P><STRONG><a name="[42]"></a>BtnSpeedUpDown</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, main.o(.text.BtnSpeedUpDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BtnSpeedUpDown &rArr; Fan_Load &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitSet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Load
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_enable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>BtnTimer</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, main.o(.text.BtnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BtnTimer &rArr; fan_shutdown &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitSet
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitClear
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_shutdown
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_command
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>EINTA_IRQHandler</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, apm32f00x_int.o(.text.EINTA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EINTA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINTB_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, apm32f00x_int.o(.text.EINTB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EINTB_IRQHandler &rArr; delay_ms &rArr; RCM_GetMasterClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputBit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_ClearIntFlag
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EINTC_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, apm32f00x_int.o(.text.EINTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EINTC_IRQHandler &rArr; btn_power_button &rArr; delay_ms &rArr; RCM_GetMasterClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_ClearIntFlag
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_power_button
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EINT_ClearIntFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_eint.o(.text.EINT_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINTB_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINTC_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINTA_IRQHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
</UL>

<P><STRONG><a name="[5f]"></a>EINT_Config</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, apm32f00x_eint.o(.text.EINT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_detector_interupt_init
</UL>

<P><STRONG><a name="[7d]"></a>FMC_ErasePage</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, apm32f00x_fmc.o(.text.FMC_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_flash2
</UL>

<P><STRONG><a name="[8c]"></a>FMC_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_fmc.o(.text.FMC_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_flash2
</UL>

<P><STRONG><a name="[8b]"></a>FMC_ProgramWord</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, apm32f00x_fmc.o(.text.FMC_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_flash2
</UL>

<P><STRONG><a name="[8a]"></a>FMC_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_fmc.o(.text.FMC_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_flash2
</UL>

<P><STRONG><a name="[46]"></a>Fan_Load</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fan.o(.text.Fan_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Fan_Load &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitClear
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_command
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_SetCompareCapture
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSpeedUpDown
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>GPIO_Config</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, apm32f00x_gpio.o(.text.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Load
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_detector_interupt_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator_init
</UL>

<P><STRONG><a name="[4c]"></a>GPIO_ReadInputBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f00x_gpio.o(.text.GPIO_ReadInputBit))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINTB_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_power_button
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IWDT_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f00x_iwdt.o(.text.IWDT_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>IWDT_EnableWriteAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f00x_iwdt.o(.text.IWDT_EnableWriteAccess))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>IWDT_ReloadCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f00x_iwdt.o(.text.IWDT_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
</UL>

<P><STRONG><a name="[85]"></a>IWDT_SetDivider</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f00x_iwdt.o(.text.IWDT_SetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>IWDT_SetReloadCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f00x_iwdt.o(.text.IWDT_SetReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>LIRCMeasurment</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, main.o(.text.LIRCMeasurment))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LIRCMeasurment &rArr; TMR1_ConfigInputCapture
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_ClearStatusFlag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_ReadStatusFlag
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_ReadCompareCapture
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_DisableCompareCapture
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_Disable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_Enable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_ConfigInputCapture
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_GetMasterClockFreq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WUPT_DisableLIRCMeasurement
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WUPT_EnableLIRCMeasurement
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>NVIC_EnableIRQRequest</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, apm32f00x_misc.o(.text.NVIC_EnableIRQRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_EnableIRQRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_detector_interupt_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4Init
</UL>

<P><STRONG><a name="[89]"></a>PMU_EnterHaltModeWFI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, apm32f00x_misc.o(.text.PMU_EnterHaltModeWFI))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>PowerSpeedMode</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main.o(.text.PowerSpeedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PowerSpeedMode &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitSet
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_enable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>RCM_ClearResetFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_rcm.o(.text.RCM_ClearResetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetProc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
</UL>

<P><STRONG><a name="[52]"></a>RCM_GetMasterClockFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, apm32f00x_rcm.o(.text.RCM_GetMasterClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_GetMasterClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[6e]"></a>RCM_ReadClockFlag</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, apm32f00x_rcm.o(.text.RCM_ReadClockFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[62]"></a>RCM_ReadResetFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32f00x_rcm.o(.text.RCM_ReadResetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetProc
</UL>

<P><STRONG><a name="[5e]"></a>Remote_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, remote.o(.text.Remote_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Remote_Init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[61]"></a>ResetProc</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text.ResetProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ResetProc &rArr; wirte_flash2 &rArr; FMC_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ClearResetFlag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadResetFlag
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_flash2
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SerialPrint_NumString</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, usart_app.o(.text.SerialPrint_NumString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadStatusFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxData8
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnTimer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSpeedUpDown
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSpeedMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_command
</UL>

<P><STRONG><a name="[68]"></a>Serial_begin</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usart_app.o(.text.Serial_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Serial_begin &rArr; USART_Config &rArr; RCM_GetMasterClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[6b]"></a>Serial_newline</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart_app.o(.text.Serial_newline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Serial_newline &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadStatusFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxData8
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Serial_print_int</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usart_app.o(.text.Serial_print_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Serial_print_int &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadStatusFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxData8
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>Serial_print_string</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usart_app.o(.text.Serial_print_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Serial_print_string &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadStatusFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxData8
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f00x_int.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SystemInit</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, system_apm32f00x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadClockFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>TMR1_ClearStatusFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, apm32f00x_tmr1.o(.text.TMR1_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[54]"></a>TMR1_ConfigInputCapture</STRONG> (Thumb, 324 bytes, Stack size 20 bytes, apm32f00x_tmr1.o(.text.TMR1_ConfigInputCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR1_ConfigInputCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[5a]"></a>TMR1_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f00x_tmr1.o(.text.TMR1_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[59]"></a>TMR1_DisableCompareCapture</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, apm32f00x_tmr1.o(.text.TMR1_DisableCompareCapture))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[55]"></a>TMR1_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f00x_tmr1.o(.text.TMR1_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[57]"></a>TMR1_ReadCompareCapture</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, apm32f00x_tmr1.o(.text.TMR1_ReadCompareCapture))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[56]"></a>TMR1_ReadStatusFlag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, apm32f00x_tmr1.o(.text.TMR1_ReadStatusFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR1_ReadStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[79]"></a>TMR2_ConfigOutputCompare</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, apm32f00x_tmr2.o(.text.TMR2_ConfigOutputCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR2_ConfigOutputCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_enable
</UL>

<P><STRONG><a name="[78]"></a>TMR2_ConfigTimerBase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, apm32f00x_tmr2.o(.text.TMR2_ConfigTimerBase))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_enable
</UL>

<P><STRONG><a name="[50]"></a>TMR2_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_tmr2.o(.text.TMR2_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Load
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_init
</UL>

<P><STRONG><a name="[7a]"></a>TMR2_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_tmr2.o(.text.TMR2_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_enable
</UL>

<P><STRONG><a name="[4f]"></a>TMR2_SetCompareCapture</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, apm32f00x_tmr2.o(.text.TMR2_SetCompareCapture))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Load
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_shutdown
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_command
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_init
</UL>

<P><STRONG><a name="[6f]"></a>TMR4Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, time.o(.text.TMR4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR4Init &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_EnableInterrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_Enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_ConfigTimerBase
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[73]"></a>TMR4_ClearIntFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_tmr4.o(.text.TMR4_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_IRQHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
</UL>

<P><STRONG><a name="[70]"></a>TMR4_ConfigTimerBase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f00x_tmr4.o(.text.TMR4_ConfigTimerBase))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4Init
</UL>

<P><STRONG><a name="[72]"></a>TMR4_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_tmr4.o(.text.TMR4_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4Init
</UL>

<P><STRONG><a name="[71]"></a>TMR4_EnableInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_tmr4.o(.text.TMR4_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4Init
</UL>

<P><STRONG><a name="[15]"></a>TMR4_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, apm32f00x_int.o(.text.TMR4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USART_Config</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, apm32f00x_usart.o(.text.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Config &rArr; RCM_GetMasterClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_GetMasterClockFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_begin
</UL>

<P><STRONG><a name="[6a]"></a>USART_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f00x_usart.o(.text.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_begin
</UL>

<P><STRONG><a name="[67]"></a>USART_ReadStatusFlag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, apm32f00x_usart.o(.text.USART_ReadStatusFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ReadStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_newline
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_print_int
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_print_string
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
</UL>

<P><STRONG><a name="[66]"></a>USART_TxData8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_usart.o(.text.USART_TxData8))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_newline
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_print_int
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_print_string
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
</UL>

<P><STRONG><a name="[5b]"></a>WUPT_DisableLIRCMeasurement</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_wupt.o(.text.WUPT_DisableLIRCMeasurement))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[53]"></a>WUPT_EnableLIRCMeasurement</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f00x_wupt.o(.text.WUPT_EnableLIRCMeasurement))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
</UL>

<P><STRONG><a name="[49]"></a>bitClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utility.o(.text.bitClear))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnTimer
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Load
</UL>

<P><STRONG><a name="[45]"></a>bitSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utility.o(.text.bitSet))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnTimer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSpeedUpDown
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSpeedMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>btn_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, button.o(.text.btn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = btn_init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[4e]"></a>btn_power_button</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, button.o(.text.btn_power_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = btn_power_button &rArr; delay_ms &rArr; RCM_GetMasterClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputBit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINTC_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>button</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, button.o(.text.button))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = button &rArr; delay_ms &rArr; RCM_GetMasterClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_ReloadCounter
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputBit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>charge_detector_interupt_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fan.o(.text.charge_detector_interupt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = charge_detector_interupt_init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[4d]"></a>delay_ms</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; RCM_GetMasterClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_GetMasterClockFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINTB_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_power_button
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
</UL>

<P><STRONG><a name="[48]"></a>fan_command</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, fan.o(.text.fan_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_SetCompareCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnTimer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Load
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_shutdown
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_init
</UL>

<P><STRONG><a name="[43]"></a>fan_enable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fan.o(.text.fan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fan_enable &rArr; TMR2_ConfigOutputCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_Enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_ConfigOutputCompare
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_ConfigTimerBase
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSpeedUpDown
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSpeedMode
</UL>

<P><STRONG><a name="[7b]"></a>fan_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fan.o(.text.fan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fan_init &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_command
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_SetCompareCapture
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[4a]"></a>fan_shutdown</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fan.o(.text.fan_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fan_shutdown &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_command
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_SetCompareCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnTimer
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>flash_init1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(.text.flash_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_init1 &rArr; FMC_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>getBATvolt</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, battery.o(.text.getBATvolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = getBATvolt &rArr; ADC_read &rArr; ADC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[7f]"></a>indicator_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fan.o(.text.indicator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = indicator_init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[80]"></a>initializer</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, main.o(.text.initializer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = initializer &rArr; fan_init &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBATvolt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_detector_interupt_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_tick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 2020 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; BtnSpeedUpDown &rArr; Fan_Load &rArr; fan_command &rArr; SerialPrint_NumString &rArr; USART_ReadStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Enable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_ReloadCounter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_SetReloadCounter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_SetDivider
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_EnableWriteAccess
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputBit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnTimer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSpeedUpDown
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSpeedMode
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetProc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init1
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitSet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_remote
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBATvolt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_flash2
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitClear
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Load
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_shutdown
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;milis_tick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_tick
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_newline
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_print_int
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_print_string
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[88]"></a>milis_tick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, time.o(.text.milis_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = milis_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>read_flash2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash.o(.text.read_flash2))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetProc
</UL>

<P><STRONG><a name="[87]"></a>scan_remote</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, remote.o(.text.scan_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scan_remote
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>second_tick</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, time.o(.text.second_tick))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializer
</UL>

<P><STRONG><a name="[82]"></a>sleepMode</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, fan.o(.text.sleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sleepMode &rArr; wirte_flash2 &rArr; FMC_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_ReloadCounter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ClearResetFlag
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_EnterHaltModeWFI
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputBit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_ClearIntFlag
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_flash2
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_command
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_ClearIntFlag
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_SetCompareCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>wirte_flash2</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, flash.o(.text.wirte_flash2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wirte_flash2 &rArr; FMC_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ProgramWord
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ErasePage
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Lock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetProc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepMode
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_GetMasterClockFreq
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIRCMeasurment
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBATvolt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_print_int
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_NumString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast), UNUSED)
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
